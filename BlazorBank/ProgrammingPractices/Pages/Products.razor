@page "/products"
@inject HttpClient Http

@*
	1- Create the JSON file
	2- Create the Product Class
	3- Create the variable to hold the products
	4- Create the OnInitializedAsync method
	5- Inject the HTTP
	6- Retrieve the items
	7- Display the items
*@

<h2>Products</h2>

<div class="row">
	<div class="col-md-4">
		<input class="form-control" placeholder="Search" @bind-value="@_query" />
	</div>
	<div class="col-md-2">
		<input class="form-control" placeholder="Min Price" @bind-value="@_minPrice" />
	</div>
	<div class="col-md-2">
		<input class="form-control" placeholder="Min Price" @bind-value="@_maxPrice" />
	</div>
	<div class="col-md-4">
		<select @bind="@_category" class="form-control">
			<option>All</option>
			@foreach (var item in _categories)
			{
				<option value="@item">@item</option>
			}
		</select>
	</div>
</div>

<button class="btn btn-primary mt-2 mb-2" @onclick="Search">Search</button>
<div class="row">
	@if (_products.Count == 0)
	{
		<div class="col-6">
			<h1>No products found</h1>
		</div>
	}
	else
	{
		foreach (var item in _products)
		{
			<!-- Repeat this card structure for each product in the JSON array -->
			<div class="col-md-4 mb-4">
				<div class="card">
					<img src="@item.Image" alt="Product Image" class="card-img-top">
					<div class="card-body">
						<h5 class="card-title">@item.Name</h5>
						<p class="card-text">Category: @item.Category</p>
						<p class="card-text">Color: <div style="width:30px;height:30px;display:inline-block;border-radius:50%;background:@item.Color"></div></p>
						<p class="card-text">Price: $@item.Price</p>
					</div>
				</div>
			</div>
		}
	}
</div>

@code {
	// Logic is always
	private List<string> _categories = new List<string>();
	private List<Product> _allProducts = new List<Product>();
	private List<Product> _products = new List<Product>();
	private string _query = string.Empty;
	private decimal _minPrice = 0;
	private decimal _maxPrice = 20000;
	private string _category = string.Empty;

	private void Search()
	{
		_products = _allProducts // 15
						.Where(p => (p.Name.Contains(_query, StringComparison.InvariantCultureIgnoreCase) || p.Category.Contains(_query, StringComparison.InvariantCultureIgnoreCase))
								&& (p.Price >= _minPrice && p.Price <= _maxPrice)
								&& (p.Category.Contains(_category)))
								.OrderByDescending(p => p.Price)
						.ToList(); // 10

	}

	protected override async Task OnInitializedAsync()
	{
		// Execute on the page load
		Console.WriteLine("Products page loaded");
		_allProducts = await Http.GetFromJsonAsync<List<Product>>("sample-data/products.json");
		_products = _allProducts;
		_minPrice = _allProducts.MinBy(x => x.Price).Price;
		_maxPrice = _allProducts.MaxBy(x => x.Price).Price;
		_categories = _allProducts
						.Select(p => p.Category)
						.Distinct()
						.ToList();
		foreach (var item in _products)
		{
			Console.WriteLine(item);
		}
		// 15
	}


	public class Product
	{
		public string Name { get; set; }
		public decimal Price { get; set; }
		public string Image { get; set; }
		public string Color { get; set; }
		public string Category { get; set; }

		public override string ToString()
		{
			return $"{Name} ${Price} {Color}";
		}
	}

}
